"use strict";(globalThis.webpackChunkmydocs=globalThis.webpackChunkmydocs||[]).push([[9565],{2011:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Quality/testing-strategy","title":"Testing Strategy","description":"Purpose","source":"@site/docs/Quality/testing-strategy.md","sourceDirName":"Quality","slug":"/Quality/testing-strategy","permalink":"/brs-rmm-ai-documentation/docs/Quality/testing-strategy","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Quality/testing-strategy.md","tags":[{"inline":true,"label":"testing-strategy","permalink":"/brs-rmm-ai-documentation/docs/tags/testing-strategy"},{"inline":true,"label":"unit-tests","permalink":"/brs-rmm-ai-documentation/docs/tags/unit-tests"},{"inline":true,"label":"integration-tests","permalink":"/brs-rmm-ai-documentation/docs/tags/integration-tests"},{"inline":true,"label":"phpunit","permalink":"/brs-rmm-ai-documentation/docs/tags/phpunit"},{"inline":true,"label":"quality-assurance","permalink":"/brs-rmm-ai-documentation/docs/tags/quality-assurance"}],"version":"current","lastUpdatedBy":"Hair","lastUpdatedAt":1761836475000,"frontMatter":{"status":"draft","lastReviewed":"2025-10-08T00:00:00.000Z","owner":"members-module-team","category":"quality","tags":["testing-strategy","unit-tests","integration-tests","phpunit","quality-assurance"]},"sidebar":"qualitySidebar","previous":{"title":"Performance and Observability","permalink":"/brs-rmm-ai-documentation/docs/Quality/performance-and-observability"}}');var s=t(4848),r=t(8453);const a={status:"draft",lastReviewed:new Date("2025-10-08T00:00:00.000Z"),owner:"members-module-team",category:"quality",tags:["testing-strategy","unit-tests","integration-tests","phpunit","quality-assurance"]},l="Testing Strategy",o={},c=[{value:"Purpose",id:"purpose",level:2},{value:"When You Need This",id:"when-you-need-this",level:2},{value:"Context / Diagram",id:"context--diagram",level:2},{value:"Key Concepts",id:"key-concepts",level:2},{value:"Flow / Sequence",id:"flow--sequence",level:2},{value:"Rules &amp; Constraints",id:"rules--constraints",level:2},{value:"Minimal Example",id:"minimal-example",level:2},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"See Also",id:"see-also",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"testing-strategy",children:"Testing Strategy"})}),"\n",(0,s.jsx)(n.h2,{id:"purpose",children:"Purpose"}),"\n",(0,s.jsx)(n.p,{children:"Provide a layered approach ensuring confidence in API-driven logic, isolation guarantees, caching correctness, and frontend event flows."}),"\n",(0,s.jsx)(n.h2,{id:"when-you-need-this",children:"When You Need This"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Writing tests for a new Command/Handler"}),"\n",(0,s.jsx)(n.li,{children:"Adding a repository integration"}),"\n",(0,s.jsx)(n.li,{children:"Evaluating coverage priorities"}),"\n",(0,s.jsx)(n.li,{children:"Introducing a regression fix"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"context--diagram",children:"Context / Diagram"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Unit (VO / small funcs)\n  \u2193\nHandler Tests (mock repos)\n  \u2193\nRepository Integration (HTTP stub / contract)\n  \u2193\nEnd-to-End (Controller \u2192 Command Bus \u2192 Repo stub) + Frontend event assertions\n"})}),"\n",(0,s.jsx)(n.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Fast Feedback: Majority of tests remain in-memory (no network) using mocks/stubs"}),"\n",(0,s.jsx)(n.li,{children:"Contract Testing: Repository tests validate mapping against recorded API fixtures"}),"\n",(0,s.jsx)(n.li,{children:"Deterministic Caching: Tests assert key format + TTL logic without external Redis dependence (in-memory adapter)"}),"\n",(0,s.jsx)(n.li,{children:"Event Simulation: DOM CustomEvents dispatched in integration tests to verify listeners"}),"\n",(0,s.jsx)(n.li,{children:"Fixture Discipline: Minimal, focused fixtures; avoid huge generic payloads"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"flow--sequence",children:"Flow / Sequence"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Unit: Validate Value Object construction & invariants"}),"\n",(0,s.jsx)(n.li,{children:"Handler: Use mocked repository interfaces returning curated VOs"}),"\n",(0,s.jsx)(n.li,{children:"Repository: Use HTTP fixture playback (golden responses) to ensure mapping correctness"}),"\n",(0,s.jsx)(n.li,{children:"Integration: Exercise full request lifecycle with stubbed HTTP layer"}),"\n",(0,s.jsx)(n.li,{children:"Frontend: Simulate event dispatch & assert reactive updates (where practical)"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"rules--constraints",children:"Rules & Constraints"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Value Object tests MUST cover invalid payload scenarios"}),"\n",(0,s.jsx)(n.li,{children:"Handler tests SHOULD avoid asserting internal repository call counts (focus on output)"}),"\n",(0,s.jsx)(n.li,{children:"Repository contract tests MUST assert error mapping and required field handling"}),"\n",(0,s.jsx)(n.li,{children:"Cached path tests MUST verify both hit and miss logic"}),"\n",(0,s.jsx)(n.li,{children:"Test names SHOULD describe scenario and expected behavior succinctly"}),"\n",(0,s.jsx)(n.li,{children:"DOM event tests MUST clean up listeners after execution"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"minimal-example",children:"Minimal Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"public function testHandlerReturnsViewModel(): void {\n  $repo = $this->createMock(MemberRepository::class);\n  $repo->method('fetchProfile')->willReturn(MemberProfileVO::fromApiResponse($this->fixture('member_profile')));\n  $handler = new GetMemberProfileHandler($repo);\n  $vo = $handler->handle(new GetMemberProfileCommand('AB12','M123'));\n  $this->assertSame('M123', $vo->toArray()['id']);\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Over-mocking leading to brittle behavior assertions"}),"\n",(0,s.jsx)(n.li,{children:"Copying large JSON fixtures making diffs noisy"}),"\n",(0,s.jsx)(n.li,{children:"Ignoring negative paths (timeouts, 4xx, stale cache) until production"}),"\n",(0,s.jsx)(n.li,{children:"Mixing integration and unit concerns in single test class"}),"\n",(0,s.jsx)(n.li,{children:"Failing to assert club scoping in repository tests"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/brs-rmm-ai-documentation/docs/Patterns/commands-and-handlers",children:"Commands & Handlers"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/brs-rmm-ai-documentation/docs/Patterns/repository-and-caching-strategy",children:"Repository & Caching Strategy"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/brs-rmm-ai-documentation/docs/Frontend/frontend-architecture",children:"Frontend Architecture"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var i=t(6540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);
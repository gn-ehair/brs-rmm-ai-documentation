"use strict";(globalThis.webpackChunkmydocs=globalThis.webpackChunkmydocs||[]).push([[8563],{6230:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"Patterns/commands-and-handlers","title":"Commands and Handlers","description":"Purpose","source":"@site/docs/Patterns/commands-and-handlers.md","sourceDirName":"Patterns","slug":"/Patterns/commands-and-handlers","permalink":"/brs-rmm-ai-documentation/docs/Patterns/commands-and-handlers","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Patterns/commands-and-handlers.md","tags":[{"inline":true,"label":"command-handler-pattern","permalink":"/brs-rmm-ai-documentation/docs/tags/command-handler-pattern"},{"inline":true,"label":"business-logic","permalink":"/brs-rmm-ai-documentation/docs/tags/business-logic"},{"inline":true,"label":"use-cases","permalink":"/brs-rmm-ai-documentation/docs/tags/use-cases"},{"inline":true,"label":"implementation","permalink":"/brs-rmm-ai-documentation/docs/tags/implementation"}],"version":"current","lastUpdatedBy":"Hair","lastUpdatedAt":1761835238000,"frontMatter":{"status":"draft","lastReviewed":"2025-10-08T00:00:00.000Z","owner":"members-module-team","category":"patterns","tags":["command-handler-pattern","business-logic","use-cases","implementation"]},"sidebar":"patternsSidebar","next":{"title":"Repository and Caching Strategy","permalink":"/brs-rmm-ai-documentation/docs/Patterns/repository-and-caching-strategy"}}');var r=s(4848),t=s(8453);const a={status:"draft",lastReviewed:new Date("2025-10-08T00:00:00.000Z"),owner:"members-module-team",category:"patterns",tags:["command-handler-pattern","business-logic","use-cases","implementation"]},l="Commands and Handlers",o={},d=[{value:"Purpose",id:"purpose",level:2},{value:"When You Need This",id:"when-you-need-this",level:2},{value:"Context / Diagram",id:"context--diagram",level:2},{value:"Key Concepts",id:"key-concepts",level:2},{value:"Flow / Sequence",id:"flow--sequence",level:2},{value:"Rules &amp; Constraints",id:"rules--constraints",level:2},{value:"Minimal Example",id:"minimal-example",level:2},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"See Also",id:"see-also",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"commands-and-handlers",children:"Commands and Handlers"})}),"\n",(0,r.jsx)(n.h2,{id:"purpose",children:"Purpose"}),"\n",(0,r.jsx)(n.p,{children:"Define the intent-execution separation that keeps controllers thin, promotes testability, and centralizes business orchestration around external API interactions."}),"\n",(0,r.jsx)(n.h2,{id:"when-you-need-this",children:"When You Need This"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Adding a new feature operation"}),"\n",(0,r.jsx)(n.li,{children:"Refactoring business logic out of controllers or services"}),"\n",(0,r.jsx)(n.li,{children:"Introducing cross-cutting concerns (metrics, logging) via middleware"}),"\n",(0,r.jsx)(n.li,{children:"Writing focused unit tests for domain orchestration"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"context--diagram",children:"Context / Diagram"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Controller \u2192 Command \u2192 Command Bus \u2192 Handler \u2192 Repositories \u2192 Value Objects\n"})}),"\n",(0,r.jsx)(n.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Command: Immutable intent container (no behavior)"}),"\n",(0,r.jsx)(n.li,{children:"Handler: Single responsibility executor for one Command type"}),"\n",(0,r.jsx)(n.li,{children:"Command Bus: Dispatcher supporting middleware chaining"}),"\n",(0,r.jsx)(n.li,{children:"Middleware: Optional wrappers (timing, tracing, circuit breakers)"}),"\n",(0,r.jsx)(n.li,{children:"Value Objects: Returned from handlers or used to build View Models"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"flow--sequence",children:"Flow / Sequence"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Controller builds Command (data only, validated for presence)"}),"\n",(0,r.jsx)(n.li,{children:"Command Bus resolves matching Handler (naming convention or map)"}),"\n",(0,r.jsx)(n.li,{children:"Middleware (if any) wraps execution (e.g., metrics)"}),"\n",(0,r.jsx)(n.li,{children:"Handler loads or mutates data via repositories"}),"\n",(0,r.jsx)(n.li,{children:"Handler returns result (Value Object / collection / primitive)"}),"\n",(0,r.jsx)(n.li,{children:"Controller adapts result to HTTP response"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"rules--constraints",children:"Rules & Constraints"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Each Command MUST have exactly one Handler"}),"\n",(0,r.jsx)(n.li,{children:"Handlers MUST NOT perform direct HTTP calls (only through repositories)"}),"\n",(0,r.jsx)(n.li,{children:"Command properties MUST be scalars, Value Objects, or identifiers (no services)"}),"\n",(0,r.jsx)(n.li,{children:"Handlers SHOULD remain side-effect minimal except orchestrated outbound calls"}),"\n",(0,r.jsx)(n.li,{children:"Validation beyond simple presence MUST occur inside Handler (not controller)"}),"\n",(0,r.jsx)(n.li,{children:"Middleware MUST NOT alter Command payloads (read-only)"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"minimal-example",children:"Minimal Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"final class UpdateMemberContactCommand {\n    public function __construct(\n        private string $clubId,\n        private string $memberId,\n        private string $email\n    ) {}\n    // Accessors...\n}\n\nfinal class UpdateMemberContactHandler {\n    public function __construct(private MemberRepository $repo) {}\n    public function handle(UpdateMemberContactCommand $c): MemberContactVO {\n        $existing = $this->repo->fetchProfile($c->clubId(), $c->memberId());\n        $updated  = $this->repo->updateEmail($c->clubId(), $c->memberId(), $c->email());\n        return MemberContactVO::from($updated);\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Overloading a single Handler with multiple unrelated operations"}),"\n",(0,r.jsx)(n.li,{children:"Embedding presentation formatting inside Handlers"}),"\n",(0,r.jsx)(n.li,{children:"Allowing Commands to expose public mutable fields"}),"\n",(0,r.jsx)(n.li,{children:"Using arrays instead of dedicated Value Objects for returns"}),"\n",(0,r.jsx)(n.li,{children:"Adding cross-cutting logic directly into each Handler (prefer middleware)"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"../patterns/repository-and-caching-strategy.md",children:"Repository & Caching Strategy"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"../data-model/value-objects.md",children:"Value Objects"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"../guides/feature-golden-path.md",children:"Feature Golden Path"})}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var i=s(6540);const r={},t=i.createContext(r);function a(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);
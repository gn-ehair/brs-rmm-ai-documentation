"use strict";(globalThis.webpackChunkmydocs=globalThis.webpackChunkmydocs||[]).push([[9333],{8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(6540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}},8756:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"Frontend/events-and-dom-communication","title":"Events and DOM Communication","description":"Purpose","source":"@site/docs/Frontend/events-and-dom-communication.md","sourceDirName":"Frontend","slug":"/Frontend/events-and-dom-communication","permalink":"/brs-rmm-ai-documentation/docs/Frontend/events-and-dom-communication","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Frontend/events-and-dom-communication.md","tags":[{"inline":true,"label":"event-handling","permalink":"/brs-rmm-ai-documentation/docs/tags/event-handling"},{"inline":true,"label":"dom-manipulation","permalink":"/brs-rmm-ai-documentation/docs/tags/dom-manipulation"},{"inline":true,"label":"component-communication","permalink":"/brs-rmm-ai-documentation/docs/tags/component-communication"},{"inline":true,"label":"jquery","permalink":"/brs-rmm-ai-documentation/docs/tags/jquery"}],"version":"current","lastUpdatedBy":"Hair","lastUpdatedAt":1761835238000,"frontMatter":{"status":"draft","lastReviewed":"2025-10-08T00:00:00.000Z","owner":"members-module-team","category":"frontend","tags":["event-handling","dom-manipulation","component-communication","jquery"]},"sidebar":"frontendSidebar","next":{"title":"Frontend Architecture","permalink":"/brs-rmm-ai-documentation/docs/Frontend/frontend-architecture"}}');var s=t(4848),o=t(8453);const r={status:"draft",lastReviewed:new Date("2025-10-08T00:00:00.000Z"),owner:"members-module-team",category:"frontend",tags:["event-handling","dom-manipulation","component-communication","jquery"]},a="Events and DOM Communication",l={},d=[{value:"Purpose",id:"purpose",level:2},{value:"When You Need This",id:"when-you-need-this",level:2},{value:"Context / Diagram",id:"context--diagram",level:2},{value:"Key Concepts",id:"key-concepts",level:2},{value:"Flow / Sequence",id:"flow--sequence",level:2},{value:"Rules &amp; Constraints",id:"rules--constraints",level:2},{value:"Minimal Example",id:"minimal-example",level:2},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"See Also",id:"see-also",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"events-and-dom-communication",children:"Events and DOM Communication"})}),"\n",(0,s.jsx)(n.h2,{id:"purpose",children:"Purpose"}),"\n",(0,s.jsx)(n.p,{children:"Explain the lightweight event-driven pattern enabling decoupled coordination among Vue components, legacy scripts, and server-rendered fragments."}),"\n",(0,s.jsx)(n.h2,{id:"when-you-need-this",children:"When You Need This"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Broadcasting data refresh completion"}),"\n",(0,s.jsx)(n.li,{children:"Listening for entity updates from another component"}),"\n",(0,s.jsx)(n.li,{children:"Migrating legacy jQuery callbacks to a consistent event model"}),"\n",(0,s.jsx)(n.li,{children:"Designing test hooks for integration behavior"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"context--diagram",children:"Context / Diagram"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Component / Script \u2192 CustomEvent(dispatch) \u2192 Window \u2192 Listeners (Components / Scripts) \u2192 State Update / Re-fetch\n"})}),"\n",(0,s.jsx)(n.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["CustomEvent: Native browser mechanism with ",(0,s.jsx)(n.code,{children:"detail"})," payload"]}),"\n",(0,s.jsx)(n.li,{children:"Namespacing: Kebab-case with domain prefix for clarity"}),"\n",(0,s.jsx)(n.li,{children:"One-Way Flow: Emitters do not expect responses (fire-and-forget)"}),"\n",(0,s.jsx)(n.li,{children:"Idempotent Listeners: Safe to trigger multiple times without inconsistent state"}),"\n",(0,s.jsx)(n.li,{children:"Testability: Events can be simulated in integration tests without heavy mocking"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"flow--sequence",children:"Flow / Sequence"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Component completes an operation (e.g., member email update)"}),"\n",(0,s.jsxs)(n.li,{children:["Component constructs ",(0,s.jsx)(n.code,{children:"CustomEvent('member-contact:updated', { detail })"})]}),"\n",(0,s.jsxs)(n.li,{children:["Event dispatched on ",(0,s.jsx)(n.code,{children:"window"})," (or specific DOM node if scoping required)"]}),"\n",(0,s.jsx)(n.li,{children:"Registered listeners filter by event type"}),"\n",(0,s.jsx)(n.li,{children:"Listener updates local state or triggers data re-fetch via AJAX"}),"\n",(0,s.jsx)(n.li,{children:"UI re-renders reactively"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"rules--constraints",children:"Rules & Constraints"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Event names MUST be kebab-case; SHOULD include entity + action (",(0,s.jsx)(n.code,{children:"member-contact:updated"}),")"]}),"\n",(0,s.jsx)(n.li,{children:"Payloads SHOULD remain minimal (identifiers + changed fields) to reduce coupling"}),"\n",(0,s.jsxs)(n.li,{children:["Listeners MUST guard against missing/partial ",(0,s.jsx)(n.code,{children:"detail"})," payloads"]}),"\n",(0,s.jsx)(n.li,{children:"Emitting component MUST NOT mutate another component's state directly"}),"\n",(0,s.jsx)(n.li,{children:"Global listeners SHOULD be removed on component teardown to avoid leaks"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"minimal-example",children:"Minimal Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Listener registration\nwindow.addEventListener('member-contact:updated', (e) => {\n  if(!e.detail || !e.detail.memberId) return;\n  refreshMemberCard(e.detail.memberId);\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Overloading events with entire serialized objects instead of diffs"}),"\n",(0,s.jsx)(n.li,{children:"Forgetting teardown in components leading to duplicate handlers"}),"\n",(0,s.jsx)(n.li,{children:"Using inconsistent naming causing missed listeners"}),"\n",(0,s.jsx)(n.li,{children:"Building synchronous request/response semantics atop events"}),"\n",(0,s.jsx)(n.li,{children:"Emitting high-frequency events (e.g., on each keypress) harming performance"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"../frontend/frontend-architecture.md",children:"Frontend Architecture"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"../quality/testing-strategy.md",children:"Testing Strategy"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"../guides/feature-golden-path.md",children:"Feature Golden Path"})}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);
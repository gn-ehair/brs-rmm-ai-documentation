"use strict";(globalThis.webpackChunkmydocs=globalThis.webpackChunkmydocs||[]).push([[6346],{6510:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Foundations/command-pattern","title":"Command Pattern with Tactician","description":"Overview","source":"@site/docs/Foundations/command-pattern.md","sourceDirName":"Foundations","slug":"/Foundations/command-pattern","permalink":"/brs-rmm-ai-documentation/docs/Foundations/command-pattern","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Foundations/command-pattern.md","tags":[{"inline":true,"label":"command-pattern","permalink":"/brs-rmm-ai-documentation/docs/tags/command-pattern"},{"inline":true,"label":"cqrs","permalink":"/brs-rmm-ai-documentation/docs/tags/cqrs"},{"inline":true,"label":"tactician","permalink":"/brs-rmm-ai-documentation/docs/tags/tactician"},{"inline":true,"label":"handlers","permalink":"/brs-rmm-ai-documentation/docs/tags/handlers"},{"inline":true,"label":"separation-of-concerns","permalink":"/brs-rmm-ai-documentation/docs/tags/separation-of-concerns"}],"version":"current","lastUpdatedBy":"Hair","lastUpdatedAt":1761835238000,"frontMatter":{"status":"draft","lastReviewed":"2025-10-08T00:00:00.000Z","owner":"members-module-team","category":"patterns","tags":["command-pattern","cqrs","tactician","handlers","separation-of-concerns"]},"sidebar":"foundationsSidebar","next":{"title":"Conventions","permalink":"/brs-rmm-ai-documentation/docs/Foundations/conventions"}}');var s=t(4848),i=t(8453);const o={status:"draft",lastReviewed:new Date("2025-10-08T00:00:00.000Z"),owner:"members-module-team",category:"patterns",tags:["command-pattern","cqrs","tactician","handlers","separation-of-concerns"]},a="Command Pattern with Tactician",d={},c=[{value:"Overview",id:"overview",level:2},{value:"Why Use Commands?",id:"why-use-commands",level:2},{value:"Problems with Fat Controllers",id:"problems-with-fat-controllers",level:3},{value:"Command Pattern Solution",id:"command-pattern-solution",level:3},{value:"Command Structure",id:"command-structure",level:2},{value:"Anatomy of a Command",id:"anatomy-of-a-command",level:3},{value:"Common Command Traits",id:"common-command-traits",level:3},{value:"Handler Structure",id:"handler-structure",level:2},{value:"Anatomy of a Handler",id:"anatomy-of-a-handler",level:3},{value:"Handler Traits",id:"handler-traits",level:3},{value:"Command Bus Configuration",id:"command-bus-configuration",level:2},{value:"Command Categories",id:"command-categories",level:2},{value:"By Domain Area",id:"by-domain-area",level:3},{value:"By Action Type",id:"by-action-type",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Command Naming",id:"command-naming",level:3},{value:"Command Structure",id:"command-structure-1",level:3},{value:"Handler Structure",id:"handler-structure-1",level:3},{value:"Testing Commands and Handlers",id:"testing-commands-and-handlers",level:3},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Form Handling Pattern",id:"form-handling-pattern",level:3},{value:"API Data Pattern",id:"api-data-pattern",level:3},{value:"Redirect After Processing Pattern",id:"redirect-after-processing-pattern",level:3},{value:"Migration Guide",id:"migration-guide",level:2},{value:"Converting Fat Controllers",id:"converting-fat-controllers",level:3},{value:"Example Migration",id:"example-migration",level:3}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"command-pattern-with-tactician",children:"Command Pattern with Tactician"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["The BRS Members Module uses the ",(0,s.jsx)(n.strong,{children:"Command Pattern"})," implemented via the ",(0,s.jsx)(n.strong,{children:"Tactician library"}),'. This pattern separates the request (command) from the business logic (handler), promoting clean separation of concerns and avoiding "fat controllers."']}),"\n",(0,s.jsx)(n.h2,{id:"why-use-commands",children:"Why Use Commands?"}),"\n",(0,s.jsx)(n.h3,{id:"problems-with-fat-controllers",children:"Problems with Fat Controllers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"// \u274c Fat Controller Anti-pattern\npublic function bookTeeTime(Request $request): Response \n{\n    // 50+ lines of validation, business logic, API calls, etc.\n    $club = $this->getClub($request->get('club'));\n    $user = $request->getSession()->get('user');\n    \n    // Validation logic...\n    if (!$this->validateBookingRules($club, $user, $date, $time)) {\n        // Error handling...\n    }\n    \n    // API calls...\n    $teeTime = $this->apiClient->fetchTeeTime($club, $date, $time);\n    \n    // More business logic...\n    // Payment processing...\n    // Email notifications...\n    \n    return $this->render('booking/success.html.twig', $data);\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"command-pattern-solution",children:"Command Pattern Solution"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"// \u2705 Clean Controller with Commands\npublic function bookTeeTime(Request $request): Response \n{\n    return $this->execute(\n        new StoreBookingCommand(\n            $request->get('club'),\n            $request->getSession()->get('user'),\n            $request->get('course'),\n            $request->get('date'),\n            $request->get('time'),\n            $request->request->all(),\n            $request->headers->get('referer')\n        )\n    );\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"command-structure",children:"Command Structure"}),"\n",(0,s.jsx)(n.h3,{id:"anatomy-of-a-command",children:"Anatomy of a Command"}),"\n",(0,s.jsxs)(n.p,{children:["Commands are ",(0,s.jsx)(n.strong,{children:"data transfer objects"})," that encapsulate user intent:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"<?php\n\nnamespace App\\Command\\Booking;\n\nuse App\\Command\\HasClubTrait;\nuse App\\Command\\HasUserTrait;\nuse App\\Model\\Club;\nuse App\\Model\\User;\n\nclass StoreBookingCommand\n{\n    use HasClubTrait;    // Provides club property and getter\n    use HasUserTrait;    // Provides user property and getter\n    \n    private DateTime $dateTime;\n\n    public function __construct(\n        Club $club,\n        User $user,\n        private int $courseId,\n        private string $date,\n        private string $time,\n        private array $data,\n        private string $referer\n    ) {\n        $this->club = $club;\n        $this->user = $user;\n        $this->dateTime = DateTime::createFromFormat(\n            'YmdHi',\n            $this->getDate().$this->getTime()\n        );\n    }\n\n    // Getters for all properties...\n    public function getCourseId(): int { return $this->courseId; }\n    public function getDate(): string { return $this->date; }\n    public function getTime(): string { return $this->time; }\n    public function getData(): array { return $this->data; }\n    public function getReferer(): string { return $this->referer; }\n    public function getDateTime(): DateTime { return $this->dateTime; }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"common-command-traits",children:"Common Command Traits"}),"\n",(0,s.jsx)(n.p,{children:"Most commands use these shared traits:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"// HasClubTrait - Provides club context\ntrait HasClubTrait {\n    protected Club $club;\n    \n    public function getClub(): Club {\n        return $this->club;\n    }\n}\n\n// HasUserTrait - Provides user context  \ntrait HasUserTrait {\n    protected User $user;\n    \n    public function getUser(): User {\n        return $this->user;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"handler-structure",children:"Handler Structure"}),"\n",(0,s.jsx)(n.h3,{id:"anatomy-of-a-handler",children:"Anatomy of a Handler"}),"\n",(0,s.jsxs)(n.p,{children:["Handlers contain the ",(0,s.jsx)(n.strong,{children:"business logic"})," for processing commands:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"<?php\n\nnamespace App\\Handler\\Booking;\n\nuse App\\Command\\Booking\\StoreBookingCommand;\nuse App\\Exception\\CreateMemberBookingException;\nuse App\\Handler\\RendersTemplatesTrait;\nuse App\\Repository\\MemberBookingRepositoryInterface;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass StoreBookingHandler\n{\n    use RendersTemplatesTrait;  // Provides template rendering\n    \n    public function __construct(\n        private MemberBookingRepositoryInterface $memberBookingRepository,\n        private TeeTimeRepository $teeTimeRepository,\n        private PaymentService $paymentService\n    ) {}\n\n    public function handle(StoreBookingCommand $command): Response\n    {\n        // 1. Validate the request\n        $this->validateBookingRules($command);\n        \n        // 2. Fetch required data\n        $teeTime = $this->teeTimeRepository->fetchTeeTime(\n            $command->getClub(),\n            $command->getDateTime()\n        );\n        \n        // 3. Process business logic\n        $booking = $this->createBooking($command, $teeTime);\n        \n        // 4. Handle payments if required\n        if ($booking->requiresPayment()) {\n            $this->paymentService->processPayment($booking);\n        }\n        \n        // 5. Store the booking\n        $this->memberBookingRepository->store($booking);\n        \n        // 6. Return response\n        return new Response(\n            $this->render('booking/confirmation.html.twig', [\n                'booking' => $booking,\n                'club' => $command->getClub()\n            ])\n        );\n    }\n    \n    private function validateBookingRules(StoreBookingCommand $command): void\n    {\n        // Validation logic...\n    }\n    \n    private function createBooking(StoreBookingCommand $command, TeeTime $teeTime): MemberBooking\n    {\n        // Booking creation logic...\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"handler-traits",children:"Handler Traits"}),"\n",(0,s.jsx)(n.p,{children:"Common functionality is shared via traits:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"// RendersTemplatesTrait - Template rendering\ntrait RendersTemplatesTrait {\n    private Environment $twig;\n    \n    protected function render(string $template, array $context = []): string {\n        return $this->twig->render($template, $context);\n    }\n}\n\n// PreparesAlertsTrait - Flash messages\ntrait PreparesAlertsTrait {\n    protected function prepareAlert(string $type, string $title, string $message): void {\n        // Alert preparation logic...\n    }\n}\n\n// GeneratesUrlsTrait - URL generation\ntrait GeneratesUrlsTrait {\n    private UrlGeneratorInterface $router;\n    \n    protected function generateUrl(string $route, array $parameters = []): string {\n        return $this->router->generate($route, $parameters);\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"command-bus-configuration",children:"Command Bus Configuration"}),"\n",(0,s.jsx)(n.p,{children:"The command bus automatically routes commands to handlers:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# config/services.yaml\nservices:\n    # Command Bus\n    League\\Tactician\\CommandBus:\n        arguments:\n            - '@tactician.middleware.command_handler'\n\n    # Auto-wire handlers\n    App\\Handler\\:\n        resource: '../src/Handler/'\n        tags: ['tactician.handler']\n"})}),"\n",(0,s.jsx)(n.h2,{id:"command-categories",children:"Command Categories"}),"\n",(0,s.jsx)(n.h3,{id:"by-domain-area",children:"By Domain Area"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Domain"}),(0,s.jsx)(n.th,{children:"Purpose"}),(0,s.jsx)(n.th,{children:"Examples"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Authentication"})}),(0,s.jsx)(n.td,{children:"User login/logout"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"LoginCommand"}),", ",(0,s.jsx)(n.code,{children:"LogoutCommand"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Booking"})}),(0,s.jsx)(n.td,{children:"Tee time management"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"StoreBookingCommand"}),", ",(0,s.jsx)(n.code,{children:"DeleteBookingCommand"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Competition"})}),(0,s.jsx)(n.td,{children:"Competition entries"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"EnterCompetitionCommand"}),", ",(0,s.jsx)(n.code,{children:"ShowCompetitionsCommand"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Account"})}),(0,s.jsx)(n.td,{children:"User account management"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"ShowAccountDetailsCommand"}),", ",(0,s.jsx)(n.code,{children:"UpdateAccountDetailsCommand"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"TeeSheet"})}),(0,s.jsx)(n.td,{children:"Tee sheet display"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"ShowTeeSheetCommand"}),", ",(0,s.jsx)(n.code,{children:"ProvideTeeSheetDataCommand"})]})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"by-action-type",children:"By Action Type"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Purpose"}),(0,s.jsx)(n.th,{children:"Examples"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Show"})}),(0,s.jsx)(n.td,{children:"Display pages"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"ShowHomeCommand"}),", ",(0,s.jsx)(n.code,{children:"ShowBookingsCommand"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Provide"})}),(0,s.jsx)(n.td,{children:"API data endpoints"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"ProvideTeeSheetDataCommand"}),", ",(0,s.jsx)(n.code,{children:"ProvideBuddyListDataCommand"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Store/Update"})}),(0,s.jsx)(n.td,{children:"Data modification"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"StoreBookingCommand"}),", ",(0,s.jsx)(n.code,{children:"UpdateAccountDetailsCommand"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Delete/Remove"})}),(0,s.jsx)(n.td,{children:"Data removal"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"DeleteBookingCommand"}),", ",(0,s.jsx)(n.code,{children:"RemoveWaitingListEntryCommand"})]})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"command-naming",children:"Command Naming"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use descriptive verbs: ",(0,s.jsx)(n.code,{children:"Show"}),", ",(0,s.jsx)(n.code,{children:"Store"}),", ",(0,s.jsx)(n.code,{children:"Update"}),", ",(0,s.jsx)(n.code,{children:"Delete"}),", ",(0,s.jsx)(n.code,{children:"Provide"})]}),"\n",(0,s.jsxs)(n.li,{children:["Include domain context: ",(0,s.jsx)(n.code,{children:"ShowBookingCommand"})," not just ",(0,s.jsx)(n.code,{children:"ShowCommand"})]}),"\n",(0,s.jsxs)(n.li,{children:["Be specific: ",(0,s.jsx)(n.code,{children:"StoreBookingCommand"})," not ",(0,s.jsx)(n.code,{children:"BookingCommand"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"command-structure-1",children:"Command Structure"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"// \u2705 Good Command Structure\nclass StoreBookingCommand\n{\n    use HasClubTrait, HasUserTrait;\n    \n    public function __construct(\n        Club $club,\n        User $user,\n        private readonly int $courseId,\n        private readonly string $date,\n        private readonly string $time,\n        private readonly array $formData\n    ) {\n        $this->club = $club;\n        $this->user = $user;\n    }\n    \n    // Only getters, no business logic\n    public function getCourseId(): int { return $this->courseId; }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"handler-structure-1",children:"Handler Structure"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"// \u2705 Good Handler Structure  \nclass StoreBookingHandler\n{\n    public function __construct(\n        private SomeRepository $repository,\n        private SomeService $service\n    ) {}\n    \n    public function handle(StoreBookingCommand $command): Response\n    {\n        // 1. Validate\n        // 2. Process\n        // 3. Store\n        // 4. Return response\n    }\n    \n    // Private methods for complex logic\n    private function validateBookingRules(): void { }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"testing-commands-and-handlers",children:"Testing Commands and Handlers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"class StoreBookingHandlerTest extends TestCase\n{\n    public function testHandleCreatesBookingSuccessfully(): void\n    {\n        // Arrange\n        $command = new StoreBookingCommand(\n            $this->createClub(),\n            $this->createUser(),\n            1, // courseId\n            '20250901', // date\n            '1000', // time\n            [] // formData\n        );\n        \n        // Act\n        $response = $this->handler->handle($command);\n        \n        // Assert\n        $this->assertInstanceOf(Response::class, $response);\n        $this->assertStringContainsString('booking confirmed', $response->getContent());\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"form-handling-pattern",children:"Form Handling Pattern"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"// Controller\npublic function booking(Request $request): Response\n{\n    if ($request->getMethod() === 'POST') {\n        return $this->execute(\n            new StoreBookingCommand(/* ... form data ... */)\n        );\n    }\n    \n    return $this->execute(\n        new ShowBookingFormCommand(/* ... */)\n    );\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"api-data-pattern",children:"API Data Pattern"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"// Provide data for AJAX requests\n#[Route('/{club}/bookings/data', methods: ['GET'])]\npublic function bookingsData(Request $request): Response\n{\n    return $this->execute(\n        new ProvideBookingsDataCommand(\n            $request->get('club'),\n            $request->getSession()->get('user')\n        )\n    );\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"redirect-after-processing-pattern",children:"Redirect After Processing Pattern"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"// Handler returns redirect response\npublic function handle(DeleteBookingCommand $command): Response\n{\n    $this->memberBookingRepository->delete($command->getBookingId());\n    \n    $this->prepareAlert(\n        Alert::TYPE_SUCCESS,\n        'Booking Deleted',\n        'Your booking has been successfully deleted.'\n    );\n    \n    return new RedirectResponse(\n        $this->generateUrl('bookings', ['club' => $command->getClub()->getId()])\n    );\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"migration-guide",children:"Migration Guide"}),"\n",(0,s.jsx)(n.h3,{id:"converting-fat-controllers",children:"Converting Fat Controllers"}),"\n",(0,s.jsx)(n.p,{children:"When you encounter a fat controller:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Identify the intent"})," - What is the user trying to do?"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Create a command"})," - Extract parameters into a command object"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Create a handler"})," - Move business logic to a handler"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Update controller"})," - Replace logic with command execution"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Add tests"})," - Test the handler logic"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-migration",children:"Example Migration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"// Before: Fat Controller\npublic function updateAccount(Request $request): Response \n{\n    $club = $this->getClub($request->get('club'));\n    $user = $request->getSession()->get('user');\n    $formData = $request->request->all()['account_form'];\n    \n    // 30+ lines of validation and processing...\n    \n    return $this->render('account/updated.html.twig', $data);\n}\n\n// After: Command Pattern\npublic function updateAccount(Request $request): Response \n{\n    return $this->execute(\n        new UpdateAccountDetailsCommand(\n            $request->get('club'),\n            $request->getSession()->get('user'),\n            $request->request->all()['account_form']\n        )\n    );\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"This pattern keeps controllers thin, makes business logic testable, and promotes code reusability across the application."})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(6540);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);